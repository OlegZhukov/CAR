// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CAR.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Finding and removing seams")]
    public partial class FindingAndRemovingSeamsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "FindAndRemoveSeams.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Finding and removing seams", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing a few seams with the RGBGradNorm energy function")]
        public virtual void RemovingAFewSeamsWithTheRGBGradNormEnergyFunction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a few seams with the RGBGradNorm energy function", ((string[])(null)));
#line 3
  this.ScenarioSetup(scenarioInfo);
#line 4
    testRunner.Given("image Test-Input.png");
#line 5
    testRunner.When("I use the energy function RGBGradNorm");
#line 6
    testRunner.And("I resize the image to 594px width and 395px height");
#line 7
    testRunner.Then("I should get image Test-Output1.png");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resizing to 70% with the BrightGradX energy function")]
        public virtual void ResizingTo70WithTheBrightGradXEnergyFunction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resizing to 70% with the BrightGradX energy function", ((string[])(null)));
#line 9
  this.ScenarioSetup(scenarioInfo);
#line 10
    testRunner.Given("image Test-Input.png");
#line 11
    testRunner.When("I use the energy function BrightGradX");
#line 12
    testRunner.And("I resize the image to 70% width and 70% height");
#line 13
    testRunner.Then("I should get image Test-Output2.png");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resizing to 50% x 300px with the default energy function")]
        public virtual void ResizingTo50X300PxWithTheDefaultEnergyFunction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resizing to 50% x 300px with the default energy function", ((string[])(null)));
#line 15
  this.ScenarioSetup(scenarioInfo);
#line 16
    testRunner.Given("image Test-Input.png");
#line 17
    testRunner.When("I resize the image to 50% width and 300px height");
#line 18
    testRunner.Then("I should get image Test-Output3.png");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resizing to 50% x 300px with the BrightGradNorm energy function")]
        public virtual void ResizingTo50X300PxWithTheBrightGradNormEnergyFunction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resizing to 50% x 300px with the BrightGradNorm energy function", ((string[])(null)));
#line 20
  this.ScenarioSetup(scenarioInfo);
#line 21
    testRunner.Given("image Test-Input.png");
#line 22
    testRunner.When("I use the energy function BrightGradNorm");
#line 23
    testRunner.And("I resize the image to 50% width and 300px height");
#line 24
    testRunner.Then("I should get image Test-Output4.png");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
